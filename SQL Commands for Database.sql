--PROJECT2.SQL
SUBMITTED BY: PRATAP SIMKHADA, SHIKHAR GIRI
SEAT # - E12, E13--

----***************QUESTION 1********************--
/* DELETING CUSTOMER TABLE  IF ANY EXISTS EARLIER */
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;

/* CREATING TABLE CUSTOMER */
CREATE TABLE CUSTOMER  (CUSTOMERID NUMBER,
                        CUSTOMERNAME VARCHAR2(50),
                        CUSTOMERADDRESS VARCHAR2(100),
                        CUSTOMERCITY VARCHAR2(20),
                        CUSTOMERSTATE VARCHAR2(15),
                        CUSTOMERPOSTALCODE VARCHAR2(15),
                        CUSTOMEREMAIL VARCHAR2(30),
                        CUSTOMERUSERNAME VARCHAR2(20),
                        CUSTOMERPASSWORD VARCHAR2(30),
                        PRIMARY KEY (CUSTOMERID));
    

/* DELETING TERRITORY TABLE IF ANY EXISTS EARLIER */
DROP TABLE TERRITORY CASCADE CONSTRAINTS;

/* CREATING TABLE TERRITORY */
CREATE TABLE TERRITORY( TERRITORYID NUMBER,
                        TERRITORYNAME VARCHAR2(30),
                        PRIMARY KEY (TERRITORYID));


/* DELETING SALESPERSON TABLE IF ANY EXISTS EARLIER */
DROP TABLE SALESPERSON CASCADE CONSTRAINTS;

/* CREATING TABLE SALESPERSON */
CREATE TABLE SALESPERSON  ( SALESPERSONID NUMBER,
                            SALESPERSONNAME VARCHAR2(30),
                            SALESPERSONPHONE VARCHAR2(15),
                            SALESPERSONEMAIL VARCHAR2(100),
                            SALESPERSONUSERNAME VARCHAR2(50),
                            SALESPERSONPASSWORD VARCHAR2(50),
                            TERRITORYID NUMBER,
                            PRIMARY KEY (SALESPERSONID),
                            FOREIGN KEY (TERRITORYID) REFERENCES TERRITORY (TERRITORYID) ON DELETE CASCADE);



/* DELETING DOESBUSINESSIN TABLE IF ANY EXISTS EARLIER */
DROP TABLE DOESBUSINESSIN CASCADE CONSTRAINTS;

/* CREATING TABLE DOESBUSINESS */
CREATE TABLE DOESBUSINESSIN ( CUSTOMERID NUMBER,
                              TERRITORYID NUMBER,
                              PRIMARY KEY (CUSTOMERID, TERRITORYID),
                              FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER (CUSTOMERID) ON DELETE CASCADE,
                              FOREIGN KEY (TERRITORYID) REFERENCES TERRITORY (TERRITORYID) ON DELETE CASCADE);


/* DELETING PRODUCTLINE TABLE IF ANY EXISTS EARLIER */
DROP TABLE PRODUCTLINE CASCADE CONSTRAINTS;

/* CREATING TABLE PRODUCTLINE */
CREATE TABLE PRODUCTLINE (  PRODUCTLINEID NUMBER,
                            PRODUCTLINENAME VARCHAR2(40),
                            PRIMARY KEY (PRODUCTLINEID));
                        

/* DELETING PRODUCT TABLE IF ANY EXISTS EARLIER */
DROP TABLE PRODUCT CASCADE CONSTRAINTS;

/* CREATING TABLE PRODUCT */
CREATE TABLE PRODUCT (PRODUCTID NUMBER,
                    PRODUCTNAME VARCHAR2(30),
                    PRODUCTFINISH VARCHAR2(30),
                    PRODUCTSTANDARDPRICE NUMBER,
                    PRODUCTLINEID NUMBER,
                    PHOTO VARCHAR2(20),
                    PRIMARY KEY (PRODUCTID),
                    FOREIGN KEY (PRODUCTLINEID) REFERENCES PRODUCTLINE(PRODUCTLINEID) ON DELETE CASCADE);


/* DELETING PRODUCTLINE TABLE IF ANY EXISTS EARLIER */
DROP TABLE ORDERS CASCADE CONSTRAINTS;

/* CREATING TABLE ORDERS */
CREATE TABLE ORDERS (   ORDERID NUMBER,
                        ORDERDATE DATE,
                        CUSTOMERID NUMBER,
                        PRIMARY KEY (ORDERID),
                        FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER(CUSTOMERID) ON DELETE CASCADE);

/* DELETING ORDERLINE TABLE IF ANY EXISTS EARLIER */
DROP TABLE ORDERLINE CASCADE CONSTRAINTS;

/* CREATING TABLE ORDERLINE */
CREATE TABLE ORDERLINE( ORDERID NUMBER,
                        PRODUCTID NUMBER,
                        ORDEREDQUANTITY NUMBER,
                        SALEPRICE NUMBER,
                        PRIMARY KEY (ORDERID, PRODUCTID),
                        FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID) ON DELETE CASCADE,
                        FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID) ON DELETE CASCADE);


/* DELETING PRICEUPDATE TABLE IF ANY EXISTS EARLIER */
DROP TABLE PRICEUPDATE CASCADE CONSTRAINTS;

/* CREATING TABLE PRICEUPDATE */
CREATE TABLE PRICEUPDATE(   PRICEUPDATEID NUMBER,
                            DATECHANGED DATE,
                            OLDPRICE NUMBER,
                            NEWPRICE NUMBER,
                            PRIMARY KEY (PRICEUPDATEID));

----***************************************************************************----
--VIEW--

/* DELETE OR REPLACE VIEW COMPARISION IF ANY EXISTES EARLIER */
DROP VIEW COMPARISON CASCADE CONSTRAINTS;

/* CREATING OR REPLACING VIEW COMPARISON */
CREATE OR REPLACE VIEW COMPARISON(PRODUCTLINEID, PRODUCTID, PRODUCTNAME, SALESPRICE, ORDEREDQUANTITY, TOTALSALES) AS
SELECT PL.PRODUCTLINEID, P.PRODUCTID, P.PRODUCTNAME,OL.SALEPRICE, SUM(OL.ORDEREDQUANTITY), 
(SUM(OL.ORDEREDQUANTITY)*OL.SALEPRICE)
FROM PRODUCTLINE PL, PRODUCT P, ORDERLINE OL
WHERE PL.PRODUCTLINEID = P.PRODUCTLINEID AND P.PRODUCTID = OL.PRODUCTID
GROUP BY PL.PRODUCTLINEID, P.PRODUCTID, P.PRODUCTNAME, OL.SALEPRICE
ORDER BY PL.PRODUCTLINEID;


/* DELETE OR REPLACE VIEW TOTALVALUE IF ANY EXISTES EARLIER */
DROP VIEW TOTALVALUE CASCADE CONSTRAINTS;

/* CREATING OR REPLACING VIEW TOTALVALUE */
CREATE OR REPLACE VIEW TOTALVALUE(PRODUCTID, PRODUCTNAME, SALEPRICE, ORDEREDQUANTITY, TOTALSALES) AS
SELECT P.PRODUCTID, P.PRODUCTNAME, OL.SALEPRICE, SUM(OL.ORDEREDQUANTITY), (SUM(OL.ORDEREDQUANTITY)*OL.SALEPRICE)
FROM PRODUCT P, ORDERLINE OL
WHERE P.PRODUCTID = OL.PRODUCTID
GROUP BY P.PRODUCTID, P.PRODUCTNAME, OL.SALEPRICE
ORDER BY P.PRODUCTID;


/* DELETE OR REPLACE VIEW TERRITORYSALE IF ANY EXISTES EARLIER */
DROP VIEW TERRITORYSALE CASCADE CONSTRAINTS;

/* CREATING OR REPLACING VIEW TERRITORYSALE */
CREATE OR REPLACE VIEW TERRITORYSALE(SALESPERSONID, TERRITORYID, CUSTOMERID, PRODUCTID, PROODUCTSATNDARDPRICE) AS
SELECT S.SALESPERSONID, B.TERRITORYID, C.CUSTOMERID, P.PRODUCTID, P.PRODUCTSTANDARDPRICE
FROM CUSTOMER C, PRODUCT P, SALESPERSON S, ORDERLINE OL, ORDERS O, DOESBUSINESSIN B
WHERE OL.PRODUCTID = P.PRODUCTID AND O.ORDERID = OL.ORDERID AND C.CUSTOMERID = O.CUSTOMERID
AND B.CUSTOMERID = C.CUSTOMERID AND B.TERRITORYID = S.TERRITORYID
ORDER BY S.SALESPERSONID;


/* DELETE OR REPLACE VIEW SHIPMENT IF ANY EXISTES EARLIER */
DROP VIEW SHIPMENT CASCADE CONSTRAINTS;

/* CREATING OR REPLACING VIEW SHIPMENT */
CREATE OR REPLACE VIEW SHIPMENT(CUSTOMERSTATE, CUSTOMERCOUNT) AS
SELECT C.CUSTOMERSTATE, COUNT(C.CUSTOMERID)
FROM CUSTOMER C
GROUP BY CUSTOMERSTATE;


/* DELETE OR REPLACE VIEW PURCHASEHISTORY IF ANY EXISTES EARLIER */
DROP VIEW PURCHASEHISTORY CASCADE CONSTRAINTS;

/* CREATING OR REPLACING VIEW PURCHASEHISTORY */
CREATE OR REPLACE VIEW PURCHASEHISTORY(CUSTOMERID, CUSTOMERNAME, ORDERID, ORDERDATE, ORDERQUANTITY, PRODUCTNAME, 
PRODUCTSTANDARDPRICE)
AS SELECT C.CUSTOMERID, C.CUSTOMERNAME, O.ORDERID, O.ORDERDATE, OL.ORDEREDQUANTITY, P.PRODUCTNAME, P.PRODUCTSTANDARDPRICE
FROM CUSTOMER C, ORDERS O, ORDERLINE OL, PRODUCT P
WHERE C.CUSTOMERID = O.CUSTOMERID AND OL.ORDERID = O.ORDERID AND P.PRODUCTID = OL.PRODUCTID
ORDER BY C.CUSTOMERID;



/* DELETE OR REPLACE VIEW ORDERDETAIL IF ANY EXISTES EARLIER */
DROP VIEW ORDERDETAIL CASCADE CONSTRAINTS;

/* CREATING OR REPLACING VIEW ORDERDETAIL */
CREATE OR REPLACE VIEW ORDERDETAIL(ORDERID, ORDERDATE, CUSTOMERID) AS
SELECT O.ORDERID, O.ORDERDATE, C.CUSTOMERID
FROM ORDERS O, CUSTOMER C
WHERE O.CUSTOMERID = C.CUSTOMERID;

---TRIGGER----
/* TRIGGER FOR STANDARDPRICEUPDATE */
CREATE OR REPLACE TRIGGER STANDARDPRICEUPDATE
AFTER UPDATE OF PRODUCTSTANDARDPRICE ON PRODUCT 
FOR EACH ROW
DECLARE
        CURRENTDATE DATE;
BEGIN
    SELECT CURRENTDATE INTO CURRENTDATE
    FROM SYS.DUAL;
    
    INSERT INTO PRICEUPDATE (PRICEUPDATEID, DATECHANGED, OLDPRICE, NEWPRICE)
    VALUES (NULL,CURRENTDATE, :OLD.PRODUCTSTANDARDPRICE, :NEW.PRODUCTSTANDARDPRICE);
    DBMS_OUTPUT.PUT_LINE('SUCCESSFULLY ADDED');
    
END;


----******************QUESTION 2**************************----
/* INSERTING IN TABLE CUSTOMER */
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES(1,'Contemporary Casuals', '1355 S Hines Blvd', 'Gainesville', 'FL', '32601-2871');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (2, 'Value Furnitures', '15145 S.W. 17th St.', 'Plano', 'TX', '75094-7734');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE,CUSTOMEREMAIL, CUSTOMERUSERNAME, CUSTOMERPASSWORD )
VALUES (3, 'Home Furnishings', '1900 Allard Ave', 'Albany', 'NY', '12209-1125', 'homefurnishings?@gmail,com', 'CUSTOMER1', 'CUSTOMER1#');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (4, 'Eastern Furniture', '1925 Beltline Rd.', 'Carteret', 'NJ', '07008-3188');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (5, 'Impressions', '5585 Westcott Ct.', 'Sacramento', 'CA', '94206-4056');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (6, 'Furniture Gallery', '325 Flatiron Dr.', 'Boulder', 'CO', '80514-4432');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (7, 'New Furniture', 'Palace Ave', 'Farmington', 'NM', '');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (8, 'Dunkins Furniture', '7700 Main St', 'Syracuse', 'NY', '31590');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (9, 'A Carpet', '434 Abe Dr', 'Rome', 'NY', '13440');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (12, 'Flanigan Furniture', 'Snow Flake Rd', 'Ft Walton Beach', 'FL', '32548');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (13, 'Ikards', '1011 S. Main St', 'Las Cruces', 'NM', '88001');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (14, 'Wild Bills', 'Four Horse Rd', 'Oak Brook', 'Il', '60522');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (15, 'Janet`s Collection', 'Janet Lane', 'Virginia Beach', 'VA', '10012');
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME, CUSTOMERADDRESS, CUSTOMERCITY, CUSTOMERSTATE, CUSTOMERPOSTALCODE)
VALUES (16, 'ABC Furniture Co.', '152 Geramino Drive', 'Rome', 'NY', '13440');

/* INSERTING IN TABLE TERRITORY */
INSERT INTO TERRITORY(TERRITORYID, TERRITORYNAME)
VALUES ('1', 'SOUTHEAST');
INSERT INTO TERRITORY(TERRITORYID, TERRITORYNAME)
VALUES ('2', 'SOUTHWEST');
INSERT INTO TERRITORY(TERRITORYID, TERRITORYNAME)
VALUES ('3', 'NORTHEAST');
INSERT INTO TERRITORY(TERRITORYID, TERRITORYNAME)
VALUES ('4', 'NORTHWEST');
INSERT INTO TERRITORY(TERRITORYID, TERRITORYNAME)
VALUES ('5', 'CENTRAL');

/* INSERTING IN TABLE SALESPERSON */
INSERT INTO SALESPERSON ( SALESPERSONID, SALESPERSONNAME, SALESPERSONPHONE, SALESPERSONEMAIL, SALESPERSONUSERNAME, SALESPERSONPASSWORD, TERRITORYID)
VALUES ('1', 'Doug Henny','8134445555', 'salesperson?@gmail.com', 'SALESPERSON', 'SALESPERSON#', '1');
INSERT INTO SALESPERSON (SALESPERSONID, SALESPERSONNAME, SALESPERSONPHONE, TERRITORYID) 
VALUES ('2', 'Robert Lewis', '8139264006', '2');
INSERT INTO SALESPERSON (SALESPERSONID, SALESPERSONNAME, SALESPERSONPHONE, TERRITORYID) 
VALUES ('3', 'William Strong', '5053821212', '3');
INSERT INTO SALESPERSON (SALESPERSONID, SALESPERSONNAME, SALESPERSONPHONE, TERRITORYID) 
VALUES ('4', 'Julie Dawson', '4355346677', '4');
INSERT INTO SALESPERSON (SALESPERSONID, SALESPERSONNAME, SALESPERSONPHONE, TERRITORYID) 
VALUES ('5', 'Jacob Winslow', '2238973498', '5');

/* INSERTING IN TABLE DOESBUSINESSIN */
INSERT INTO DOESBUSINESSIN (CUSTOMERID, TERRITORYID)
VALUES ('1', '1');
INSERT INTO DOESBUSINESSIN (CUSTOMERID, TERRITORYID)
VALUES ('2', '2');
INSERT INTO DOESBUSINESSIN (CUSTOMERID, TERRITORYID)
VALUES ('3', '3');
INSERT INTO DOESBUSINESSIN (CUSTOMERID, TERRITORYID)
VALUES ('4', '4');
INSERT INTO DOESBUSINESSIN (CUSTOMERID, TERRITORYID)
VALUES ('5', '5');
INSERT INTO DOESBUSINESSIN (CUSTOMERID, TERRITORYID)
VALUES ('6', '1');
INSERT INTO DOESBUSINESSIN (CUSTOMERID, TERRITORYID)
VALUES ('7', '2');

/* INSERTING IN TABLE PRODUCTLINE */
INSERT INTO PRODUCTLINE (PRODUCTLINEID, PRODUCTLINENAME)
VALUES ('1', 'Cheery Tree');
INSERT INTO PRODUCTLINE (PRODUCTLINEID, PRODUCTLINENAME)
VALUES ('2', 'Scandinavia');
INSERT INTO PRODUCTLINE (PRODUCTLINEID, PRODUCTLINENAME)
VALUES ('3', 'Country Look');

/* INSERTING IN TABLE PRODUCT */
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID, PHOTO) 
VALUES ('1', 'End Table', 'Cherry', '175', '1', 'table.jpg');
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID) 
VALUES ('2', 'Coffee Table', 'Natural Ash', '200', '2');
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID) 
VALUES ('3', 'Computer Desk', 'Natural Ash', '375', '2');
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID) 
VALUES ('4', 'Entertainment Center', 'Natural Maple', '650', '3');
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID) 
VALUES ('5', 'Writers Desk', 'Cherry', '325', '1');
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID)
VALUES ('6', '8-Drawer Desk', 'White Ash', '750', '2');
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID)
VALUES ('7', 'Dining Table', 'Natural Ash', '800', '2');
INSERT INTO PRODUCT (PRODUCTID, PRODUCTNAME, PRODUCTFINISH, PRODUCTSTANDARDPRICE, PRODUCTLINEID)
VALUES ('8', 'Computer Desk', 'Walnut', '250', '3');

/* INSERTING IN TABLE ORDER */
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1001', TO_DATE('2016-08-21', 'YYYY-MM-DD'), '1');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1002', TO_DATE('2016-07-21', 'YYYY-MM-DD'), '8');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1003', TO_DATE('2016-08-22', 'YYYY-MM-DD'), '15');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1004', TO_DATE('2016-10-22', 'YYYY-MM-DD'), '5');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1005', TO_DATE('2016-07-24', 'YYYY-MM-DD'), '3');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1006', TO_DATE('2016-10-24', 'YYYY-MM-DD'), '2');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1007', TO_DATE('2016-08-27', 'YYYY-MM-DD'), '5');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1008', TO_DATE('2016-10-30', 'YYYY-MM-DD'), '12');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1009', TO_DATE('2016-11-05', 'YYYY-MM-DD'), '4');
INSERT INTO ORDERS (ORDERID, ORDERDATE, CUSTOMERID) 
VALUES ('1010', TO_DATE('2016-11-05', 'YYYY-MM-DD'), '1');

/* INSERTING IN TABLE ORDERLINE */
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY)
VALUES ('1001', '1', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1001', '2', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1001', '4', '1');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1002', '3', '5');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY)
VALUES ('1003', '3', '3');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1004', '6', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1004', '8', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1005', '4', '4');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1006', '4', '1');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1006', '5', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1006', '7', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1007', '1', '3');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1007', '2', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1008', '3', '3');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1008', '8', '3');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1009', '4', '2');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1009', '7', '3');
INSERT INTO ORDERLINE (ORDERID, PRODUCTID, ORDEREDQUANTITY) 
VALUES ('1010', '8', '10');
               

----******************QUESTION 3**************************----

/*Q1 which products have a standard price of less than $275? 
PRODUCT NAME            PRODUCT STANDARD PRICE
End Table               		175                          
Coffee Table            		200                       
Computer Desk          		 250                          

*/

SELECT P.PRODUCTNAME , P.PRODUCTSTANDARDPRICE 
FROM PRODUCT P
WHERE PRODUCTSTANDARDPRICE < 275;

-----***************************************************--------

/* Q2 LIST the unit price, product name, and Product Id for all products in the product tabel

UNITPRICE   PRODUCTNAME                                 PRODUCTID
175	        End Table                                         		1
200	        Coffee Table                                      		2
375	        Computer Desk                                     	3
650	        Entertainment Center                              	4
325	        Writers Desk                                      		5
750	        8-Drawer Desk                                     		6
800	        Dining Table                                      		7
250	        Computer Desk                                     	8
*/
SELECT P.PRODUCTSTANDARDPRICE AS "UNIT PRICE", P.PRODUCTNAME, P.PRODUCTID AS “PRODUCT ID”
FROM PRODUCT P;

-----***************************************************--------
/*
Q3 What is the average standardprice for all products in inventory?

AVERAGE STANDARD PRICE
    440.625
*/

SELECT AVG(P.PRODUCTSTANDARDPRICE) AS "AVERAGE STANDARD PRICE"
FROM PRODUCT P;

-----***************************************************--------
/*
Q4 How many different items were ordered on order number 1004?

ORDERQUANTITY FOR 1004
4

*/

SELECT SUM(O.ORDEREDQUANTITY) AS "ORDERQUANTITY FOR 1004" 
FROM ORDERLINE O
WHERE ORDERID = '1004';

-----***************************************************--------

/*
Q5 WHICH ORDERS HAVE BEEN PLACED SINCE 10/24/2010
ORDERID ORDERDATE  CUSTOMERID
1002	21-JUL-16	8
1003	22-AUG-16	15
1004	22-OCT-16	5
1005	24-JUL-16	3
1006	24-OCT-16	2
1007	27-AUG-16	5
1008	30-OCT-16	12
1009	05-NOV-16	4
1010	05-NOV-16	1
1001	02-AUG-16	1

*/

SELECT * 
FROM ORDERS O
WHERE ORDERDATE > TO_DATE('10/24/2010','MM/DD/YYYY);

-----***************************************************--------
/*
Q6 Which furniture does COSC3380 carry that isn’t made of cherry?

FURNITURE

Coffee Table                                      
Computer Desk                                     
Entertainment Center                              
8-Drawer Desk                                     
Dining Table                                      
Computer Desk                                     
*/

SELECT P.PRODUCTNAME AS "Furniture"
FROM PRODUCT P
WHERE PRODUCTFINISH != 'Cherry';

-----***************************************************--------
/*
Q7 List product name, finish, and standard price for all desk and all table that costs more than $300 in the Product table

RODUCTNAME                      PRODUCTFINISH                       PRODUCTSTANDARDPRICE
Computer Desk               		Natural Ash                           	375
Writers Desk                  		Cherry                                	325
8-Drawer Desk                 	White Ash                             	750
Dining Table                   		Natural Ash                           	800

*/ 

SELECT P.PRODUCTNAME, P.PRODUCTFINISH, P.PRODUCTSTANDARDPRICE
FROM PRODUCT P
WHERE (PRODUCTNAME LIKE '%Desk%' OR PRODUCTNAME LIKE '%Table%') AND PRODUCTSTANDARDPRICE >300 ;

-----***************************************************--------
/*
Q8 Which products in the Product table have a standard price between $ 200 and $ 300?
PDI  PRODUCT NAME                        PRODUCTFINISH           PRODUCTSTANDARDPRICE       PRODUCTLINEID                        
2	Coffee Table                            Natural Ash            	200	                        2	
8	Computer Desk                       Walnut                 	250	                        3	
*/

SELECT * 
FROM PRODUCT
WHERE PRODUCTSTANDARDPRICE BETWEEN '200' AND '300';

-----***************************************************--------
/*
Q9 List customer, city, and state for all customers in the Customer table whose address is 
Florida, Texas, California, or Hawaii. List the customers alphabetically by state and 
alphabetically by customer within each state. 

CUSTOMERNAME                        CUSTOMERCITY                  CUSTOMERSTATE
Impressions                       	 Sacrame                       		 CA                                                
Contemporary Casuals                  Gainesville                   		 FL                                                
Flanigan Furniture             	Ft Walton Beach             		 FL                                                
Value Furnitures                             Plano                        		 TX                                                
*/

SELECT C.CUSTOMERNAME, C.CUSTOMERCITY, C.CUSTOMERSTATE
FROM CUSTOMER C
WHERE CUSTOMERSTATE = 'FL' OR CUSTOMERSTATE = 'TX' OR CUSTOMERSTATE = 'CA' OR CUSTOMERSTATE = 'HI'
ORDER BY CUSTOMERSTATE, CUSTOMERNAME;

-----***************************************************--------
/*Q10 
Count the number of customers with addresses in each state to which we ship. 

CUSTOMERSTATE                                   COUNT(*)
TX                                                	1
NJ                                                	1
NM                                                	2
VA                                                	1
FL                                                	2
Il                                                	1
NY                                                	4
CA                                                	1
CO                                                	1
*/

SELECT C.CUSTOMERSTATE, COUNT(*)  
FROM CUSTOMER C
WHERE C.CUSTOMERADDRESS IS NOT NULL
GROUP BY CUSTOMERSTATE;

-----***************************************************--------
/* Q11
Count the number of customers with addresses in each city to which we ship. List the cities by state.
CUSTOMERSTATE                                       CUSTOMERCITY                                        COUNT(*)
CA                                                	Sacramento                                        	1
CO                                                	Boulder                                          	 	1
FL                                                	Ft Walton Beach                                   	1
FL                                                	Gainesville                                       	1
Il                                                	Oak Brook                                         	1
NJ                                                	Carteret                                          		1
NM                                                	Farmington                                        	1
NM                                                	Las Cruces                                        	1
NY                                                	Albany                                            		1
NY                                                	Rome                                             	 	2
NY                                                	Syracuse                                        	  	1
TX                                                	Plano                                             		1
VA				Virginia Beach				1
*/

SELECT  DISTINCT C.CUSTOMERSTATE, C.CUSTOMERCITY, COUNT(*) AS "TOTAL COUNT"
FROM CUSTOMER C
GROUP BY CUSTOMERSTATE, CUSTOMERCITY
ORDER BY CUSTOMERSTATE, CUSTOMERCITY;

-----***************************************************--------
/* Q12
Find only states with more than one customer. 

CUSTOMERSTATE                                     TOTAL
NM                                                	2
FL                                                	2
NY                                                	4
*/

SELECT C.CUSTOMERSTATE, COUNT(*) AS TOTAL
FROM CUSTOMER C
WHERE C.CUSTOMERADDRESS IS NOT NULL
GROUP BY CUSTOMERSTATE
HAVING COUNT(*) >1;

-----***************************************************--------
/* Q13
List, in alphabetical order, the product finish and the average standard price for each finish 
for selected finishes having an average standard price less than 750. 

PRODUCTFINISH                                      AVG(PRODUCTSTANDARDPRICE)
Cherry                                            		250
Natural Ash                                       	458.333333
Natural Maple                                     	650
Walnut                                        	    	250

*/

SELECT P.PRODUCTFINISH, AVG(P.PRODUCTSTANDARDPRICE)
FROM PRODUCT P
GROUP BY PRODUCTFINISH HAVING AVG(P.PRODUCTSTANDARDPRICE)<750
ORDER BY PRODUCTFINISH;

-----***************************************************--------
/* Q14
What is the total value of orders placed for each furniture product? 
ORDERED PRODUCT                TOTAL VALUE
------------------------------ -----------
8-Drawer Desk                          	750
Writers Desk                           	325
Computer Desk                         	1875
Coffee Table                           	400
Entertainment Center                  2600
Dining Table                         	 1600
End Table                              	350

*/

SELECT P.PRODUCTNAME AS "ORDERED PRODUCT", SUM(P.PRODUCTSTANDARDPRICE) AS "TOTAL VALUE"
FROM PRODUCT P, ORDERS O, ORDERLINE OL
WHERE P.PRODUCTID = OL.PRODUCTID AND O.ORDERID = OL.ORDERID
GROUP BY P.PRODUCTNAME;
-----***************************************************--------



